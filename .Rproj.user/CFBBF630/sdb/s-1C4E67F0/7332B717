{
    "contents" : "# server.R\n\nlibrary(gplots)\nlibrary(ggplot2)\n\nshinyServer(\n  function(input, output) {\n    \n    # Page 1 dynamic UI element for selecting all brain regions\n    output$selectRegions = renderUI({\n      if (input$selectAllRegions == TRUE) {\n        checkboxGroupInput(inputId = 'regions', \n                           label = h3('Brain Regions'), \n                           choices = colnames(mousedata),\n                           selected = colnames(mousedata))\n      } else {\n        checkboxGroupInput(inputId = 'regions', \n                           label = h3('Brain Regions'), \n                           choices = colnames(mousedata),\n                           selected = vector(mode=\"character\", length=0))\n      }    \n    })\n    \n    # Page 1 dynamic UI element for selecting all mouse strains\n    output$selectStrains = renderUI({\n      if (input$selectAllStrains == TRUE) {\n        checkboxGroupInput(inputId = 'strains', \n                           label = h3('Mouse Strains'), \n                           choices = rownames(mousedata),\n                           selected = rownames(mousedata))\n      } else {\n        checkboxGroupInput(inputId = 'strains', \n                           label = h3('Mouse Strains'), \n                           choices = rownames(mousedata),\n                           selected = vector(mode=\"character\", length=0))\n      }    \n    })\n    \n    # Page 2 control for selecting a single strain/region to plot effect sizes\n    output$selectBoxStrainRegion = renderUI({\n      if (input$plotBy == 1) {\n        selectInput(inputId = 'selectBoxStrainRegion',\n                    label = h4('Select Strain to Plot By:'),\n                    choices = isolate(input$strains),\n                    selected = 1,\n                    multiple = FALSE)\n      } else if (input$plotBy == 2) {\n        selectInput(inputId = 'selectBoxStrainRegion',\n                    label = h4('Select Region to Plot By:'),\n                    choices = isolate(input$regions),\n                    selected = 1,\n                    multiple = FALSE)\n      }\n    })\n    \n    # Page 2 control for selecting brain regions to plot\n    output$selectInputRegions = renderUI({\n      selectInput(inputId = 'selectInputRegions', \n                  label = h4('Regions to Plot:'), \n                  choices = input$regions,\n                  selected = 1,\n                  multiple = TRUE)\n    })\n    \n    # Page 2 control for selecting mouse strains to plot\n    output$selectInputStrains = renderUI({\n      selectInput(inputId = 'selectInputStrains', \n                  label = h4('Strains to Plot:'), \n                  choices = input$strains,\n                  selected = 1,\n                  multiple = TRUE)\n    })\n    \n    # Page 2 control for specifying the plot type (box, violin, bar)\n    #output$value <- renderPrint({ input$radio })\n    \n    # Page 2 control for effect size plots\n    output$effectSizePlot = renderPlot({\n      # Regenerate this plot when the value in selectBoxStrainRegion changes\n      \n      if (!is.null(input$selectBoxStrainRegion)) {\n        if (input$plotBy == 1) {\n          #effectSizePlot = ggplot(mousedata)\n          effectSizeData = mousedata[input$selectBoxStrainRegion, isolate(input$regions)]\n        } else if (input$plotBy == 2) {\n          effectSizeData = mousedata[isolate(input$strains), input$selectBoxStrainRegion]\n        }\n        effectSizePlot = ggplot()\n        qplot(x = names(effectSizeData), \n              y = effectSizeData, \n              fill = 'navajowhite4',\n              geom = 'bar',\n              stat = 'identity',\n              xlab = '',\n              ylab = 'Effect Sizes',\n              main = input$selectBoxStrainRegion)\n      }\n    })\n    \n    # Page 1 heatmap for reclustering\n    output$heatmap1 = renderPlot({\n      # Regenerate this plot when recalculate is clicked\n      input$recalculate\n      \n      # Add error checking for input$strains and input$regions >= 2.  At least one of them must be greater than 2\n      # to perform clustering.\n      \n      # Use isolate() to prevent heatmap from generating every time a new strain/region is selected\n      mousedatamat = as.matrix(mousedata[isolate(input$strains), isolate(input$regions)])\n      nr = dim(mousedatamat)[1]\n      nc = dim(mousedatamat)[2]\n     \n      if (min(dim(mousedatamat)) != 0) {\n        #heatmap.2(mousedatamat, distfun=jdfs, col=bluered, margins=c(8,14), trace=\"none\", cexRow = 0.2 + 2/log10(nr), cexCol = 0.2 + 2/log10(nc), density.info=\"histogram\", keysize=0.8, symkey=TRUE, symbreaks=TRUE)\n        heatmap.2(mousedatamat, distfun=jdfs, col=bluered, margins=c(20,14), trace=\"none\", cexRow = 1.5, cexCol = 1.5, density.info=\"histogram\", keysize=0.8, symkey=TRUE, symbreaks=TRUE)\n      }\n    }, height = 800)\n    \n    # Page 2 heatmap for generating individual or group plots\n    output$heatmap2 = renderPlot({\n      # Regenerate this plot when recalculate is clicked\n      input$recalculate\n      \n      # Add error checking for input$strains and input$regions >= 2.  At least one of them must be greater than 2\n      # to perform clustering.\n      \n      # Use isolate() to prevent heatmap from generating every time a new strain/region is selected\n      mousedatamat = as.matrix(mousedata[isolate(input$strains), isolate(input$regions)])\n      nr = dim(mousedatamat)[1]\n      nc = dim(mousedatamat)[2]\n      \n      if (min(dim(mousedatamat)) != 0) {\n        #heatmap.2(mousedatamat, distfun=jdfs, col=bluered, margins=c(8,14), trace=\"none\", cexRow = 0.2 + 2/log10(nr), cexCol = 0.2 + 2/log10(nc), density.info=\"histogram\", keysize=0.8, symkey=TRUE, symbreaks=TRUE)\n        heatmap.2(mousedatamat, distfun=jdfs, col=bluered, margins=c(20,14), trace=\"none\", cexRow = 1.5, cexCol = 1.5, density.info=\"histogram\", keysize=0.8, symkey=TRUE, symbreaks=TRUE) \n      }\n    }, height = 800)\n  }\n)",
    "created" : 1421703657957.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "48010613",
    "id" : "7332B717",
    "lastKnownWriteTime" : 1422482514,
    "path" : "/micehome/jbruce/Documents/Code/R/ClusterMouseAutism/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}