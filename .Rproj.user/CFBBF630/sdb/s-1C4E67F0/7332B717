{
    "contents" : "# server.R\n# define all shared stuff in this top section\n\nlibrary(gplots)\nlibrary(ggplot2)\nlibrary(data.table)\n\n# contains data for every region of every mouse in long format\nindividualData = IndividualData(datadefs)\n\nshinyServer(\n  function(input, output) {\n    \n    # Page 1 dynamic UI element for selecting all brain regions\n    output$selectRegions = renderUI({\n      if (input$selectAllRegions == TRUE) {\n        checkboxGroupInput(inputId = 'regions', \n                           label = h3('Brain Regions'), \n                           choices = colnames(mousedata),\n                           selected = colnames(mousedata))\n      } else {\n        checkboxGroupInput(inputId = 'regions', \n                           label = h3('Brain Regions'), \n                           choices = colnames(mousedata),\n                           selected = vector(mode=\"character\", length=0))\n      }    \n    })\n    \n    # Page 1 dynamic UI element for selecting all mouse strains\n    output$selectStrains = renderUI({\n      if (input$selectAllStrains == TRUE) {\n        checkboxGroupInput(inputId = 'strains', \n                           label = h3('Mouse Strains'), \n                           choices = rownames(mousedata),\n                           selected = rownames(mousedata))\n      } else {\n        checkboxGroupInput(inputId = 'strains', \n                           label = h3('Mouse Strains'), \n                           choices = rownames(mousedata),\n                           selected = vector(mode=\"character\", length=0))\n      }    \n    })\n    \n    # Page 2 control for selecting a single strain/region to plot effect sizes\n    output$selectBoxStrainRegion = renderUI({\n      if (input$plotBy == 1) {\n        selectInput(inputId = 'selectBoxStrainRegion',\n                    label = h4('Select Strain to Plot By:'),\n                    choices = isolate(input$strains),\n                    selected = 1,\n                    multiple = FALSE)\n      } else if (input$plotBy == 2) {\n        selectInput(inputId = 'selectBoxStrainRegion',\n                    label = h4('Select Region to Plot By:'),\n                    choices = isolate(input$regions),\n                    selected = 1,\n                    multiple = FALSE)\n      }\n    })\n    \n    # Page 2 control for selecting brain regions to plot\n    output$selectInputRegions = renderUI({\n      selectInput(inputId = 'selectInputRegions', \n                  label = h4('Regions to Plot:'), \n                  choices = input$regions,\n                  selected = 1,\n                  multiple = TRUE)\n    })\n    \n    # Page 2 control for selecting mouse strains to plot\n    output$selectInputStrains = renderUI({\n      selectInput(inputId = 'selectInputStrains', \n                  label = h4('Strains to Plot:'), \n                  choices = input$strains,\n                  selected = 1,\n                  multiple = TRUE)\n    })\n    \n    # Page 2 control for box/violin/bar plot\n    #output$value <- renderPrint({ input$radio })\n    output$meansPlot = renderPlot({\n\n      if (!is.null(input$selectInputStrains) & !is.null(input$selectInputRegions)) {\n        \n        groupMeans = \n        \n        if (input$plotType == 1) {\n          \n        } else if (input$plotType == 2) {\n          \n        } else if (input$plotType == 3) {\n          \n        }\n        \n        # Return the plot\n        return(meansPlot)\n      }\n    }, height=800)\n    \n    # Page 2 control for effect size plots\n    output$effectSizePlot = renderPlot({\n      \n      # Select region/strain data/labels depending on which option is picked\n      if (!is.null(input$selectBoxStrainRegion)) {\n        if (input$plotBy == 1) {\n          effectSizeData = data.frame(region = isolate(input$regions), \n                                     effectSize = mousedata[input$selectBoxStrainRegion, isolate(input$regions)],\n                                     row.names = NULL)\n          effectSizePlot = ggplot(data = effectSizeData, \n                                  aes(x = stats:::reorder.default(region, effectSize), y = effectSize))\n          effectSizePlot = effectSizePlot + labs(x = \"\", \n                                                 y = \"Effect Size\")\n        } else if (input$plotBy == 2) {\n          effectSizeData = data.frame(strain = isolate(input$strains), \n                                      effectSize = mousedata[isolate(input$strains), input$selectBoxStrainRegion],\n                                      row.names = NULL)\n          effectSizePlot = ggplot(data = effectSizeData, \n                                  aes(x = stats:::reorder.default(strain, effectSize), y = effectSize))\n          effectSizePlot = effectSizePlot + labs(x = \"\", \n                                                 y = \"Effect Size\")\n        }\n        \n        # Customize other aspects of the plot\n        effectSizePlot = effectSizePlot +\n        geom_bar(stat = 'identity', \n                 fill = 'thistle1', \n                 colour='black') +\n        ggtitle(input$selectBoxStrainRegion) +\n        theme(plot.title = element_text(color=\"#000000\", \n                                        face=\"bold\", \n                                        family=\"Trebuchet MS\", \n                                        size=32)) +\n        theme(axis.title = element_text(color=\"#000000\", \n                                        face=\"bold\", \n                                        family=\"Trebuchet MS\", \n                                        size=24)) +\n        theme(axis.title.y = element_text(angle=90)) + \n        theme(axis.text.x = element_text(angle=90, \n                                         color=\"#000000\", \n                                         face=\"bold\", \n                                         family=\"Trebuchet MS\", \n                                         hjust=0, \n                                         size=14)) +\n        theme(axis.text.y = element_text(color=\"#000000\", \n                                         face=\"bold\", \n                                         family=\"Trebuchet MS\", \n                                         size=14)) +\n        ylim(-2.5, 2.5)\n        \n        # Return the plot\n        return(effectSizePlot)\n      }\n    }, height=800)\n    \n    # Page 1 heatmap for reclustering\n    output$heatmap1 = renderPlot({\n      # Regenerate this plot when recalculate is clicked\n      input$recalculate\n      \n      # Add error checking for input$strains and input$regions >= 2.  At least one of them must be greater than 2\n      # to perform clustering.\n      \n      # Use isolate() to prevent heatmap from generating every time a new strain/region is selected\n      mousedatamat = as.matrix(mousedata[isolate(input$strains), isolate(input$regions)])\n      nr = dim(mousedatamat)[1]\n      nc = dim(mousedatamat)[2]\n     \n      if (min(dim(mousedatamat)) != 0) {\n        #heatmap.2(mousedatamat, distfun=jdfs, col=bluered, margins=c(8,14), trace=\"none\", cexRow = 0.2 + 2/log10(nr), cexCol = 0.2 + 2/log10(nc), density.info=\"histogram\", keysize=0.8, symkey=TRUE, symbreaks=TRUE)\n        heatmap.2(x=mousedatamat, \n                  distfun=jdfs, \n                  col=bluered, \n                  margins=c(20,14), \n                  trace=\"none\", \n                  cexRow = 1.5, \n                  cexCol = 1.5, \n                  density.info=\"histogram\", \n                  keysize=0.8, \n                  symkey=TRUE, \n                  symbreaks=TRUE)\n      }\n    }, height=800)\n    \n    # Page 2 heatmap for generating individual or group plots\n    output$heatmap2 = renderPlot({\n      # Regenerate this plot when recalculate is clicked\n      input$recalculate\n      \n      # Add error checking for input$strains and input$regions >= 2.  At least one of them must be greater than 2\n      # to perform clustering.\n      \n      # Use isolate() to prevent heatmap from generating every time a new strain/region is selected\n      mousedatamat = as.matrix(mousedata[isolate(input$strains), isolate(input$regions)])\n      nr = dim(mousedatamat)[1]\n      nc = dim(mousedatamat)[2]\n      \n      if (min(dim(mousedatamat)) != 0) {\n        #heatmap.2(mousedatamat, distfun=jdfs, col=bluered, margins=c(8,14), trace=\"none\", cexRow = 0.2 + 2/log10(nr), cexCol = 0.2 + 2/log10(nc), density.info=\"histogram\", keysize=0.8, symkey=TRUE, symbreaks=TRUE)\n        heatmap.2(x=mousedatamat, \n                  distfun=jdfs, \n                  col=bluered, \n                  margins=c(20,14),\n                  trace=\"none\", \n                  cexRow = 1.5, \n                  cexCol = 1.5, \n                  density.info=\"histogram\", \n                  keysize=0.8, \n                  symkey=TRUE, \n                  symbreaks=TRUE) \n      }\n    }, height=800)\n  }\n)",
    "created" : 1421703657957.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "207900733",
    "id" : "7332B717",
    "lastKnownWriteTime" : 1423079688,
    "path" : "/micehome/jbruce/Documents/Code/R/ClusterMouseAutism/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}